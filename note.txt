main features:
    users profiles
    follow/unfollow feature
    communities
    posts
    tags
    rich text editor for posts
    voting system
    caching
    search system
    internationalization (i18n)
    localization (l10n)

database models:
    Users
    Posts
    Communities


backend options (only api)
    django+djangorestframework
    fastapi
    flask


database options:
    development: sqlite
    production: postgresql
    ORM: sqlalchemy (sqlmodel cannot be used since fastapi-users uses sqlalchemy)

production:
    docker
    nginx
    uvicorn

models:
    user (in authentication section)
    profile (in profile app)
    community (in community app)
    post (in posts app)
    comment (in comment app)
    tag (in posts app)

relationships:
    user --> profile
    user --> posts
    user --> communities
    user --> comments

    community --> users
    community --> posts
    
    post --> user
    post --> community
    post --> comments

    comment --> user
    comment --> comments

1. setting up OK
    adding env
    > pip install python-dotenv
    - add .env file (inside it secret and database url)
    adding database (no alembic yet)
    (for db file, it is important where the current working dir is when running the application)
    (navigate inside backend and then run > python runserver.py)
    

2. adding fastapi-users OK
    > pip install fastapi-users[sqlalchemy]
    - update requirements.txt > pip freeze > requirements.txt


3. setting up alembic
    > pip install alembic
    > update alembic/env.py (import Base and all other models, set target_metadata to Base.metadata)
    if using aiosqlite, sqlalchemy url needs to be hardcoded into alembic.ini file,
    but if using only sqlite or postgresql, the more dynamic version can be added as follows:
    from src.config import DATABASE_URL
    config.set_main_option('sqlalchemy.url', DATABASE_URL)
    (add them right below target_metadata = Base.metadata) in env.py
    > alembic revision --autogenerate -m "Initial migration"
    - edit the migration file
    > alembic upgrade head


4. adding models:
    NOTE: i'll be using the most modern configuration style of sqlalchemy: "Annotated Declarative"
    NOTE: decided to move first_name, last_name and username to Profile model
    NOTE: in order to be able to make all the relationships, other models too need to be..
    ..implemented right now.
    NOTE: for many-to-many relationships, an association table is used (aka junction).

    - update alembic/env.py as well
    ERROR during running alembic revision command:
    SyntaxError: from __future__ imports must occur at the beginning of the file
    leaving tagging feature for later


5. testing models
    first with registration
    upon user registration and user profile needs to be made as well

    STRUCTURE UPDATE: Moving all models into same module in apps folder.
    router and schemas will remain in separate apps folder.
    VERY IMPORTANT NOTE:
    to read tables with relationships, must define a 'load strategy'.
    (especially when useing async with sqlalchemy)
    NOTE: session query method is old in sqlalchemy.
    execute and select and other ... needs to be used.
    PROBLEM on profile-community association table, no id column.
    HUGE problem in profile join community crud action...
    attempting to remvoe database and run upgrade head again



6. to run tests with pytest:
    > pytest -s (s flag to include the print statements)
        - anyio
        - pytest-asyncio
        - pytest-tornasync
        - pytest-trio
        - pytest-twisted


    > pip install anyio pytest-asyncio pytest-tornasync pytest-trio pytest-twisted twisted

    - added pyproject.toml (used for async pytest)
    IMPORTANT: to run tests asynchronously, got help from a book:
    > pip install httpx pytest-asyncio
    - add the following to pyproject.toml or pytest.ini:
    asyncio_mode = True
    (if pytest.int exists, it will take precedence over any other file)
    NOTE: Reverting back to non async testing (i was doing it wrong all along)
    (TestClient does not support async based tests)
    Removing test folder entrirely

    PROBLEM: Project is written in async.
    all codes and database connection is async.

    so that will cause problems in testing, unless testing is also done in async.
    i must either convert project into sync, the use normal sync tests...
    or make the tests, async as well... (we'll go with this for now)

    0001.py in database folder is a possible update on database session.
    note: async codes need to run in a event loop.
    note: pytest command must be ran inside where pytest.ini file exists




7. some heavy structure update:
    using pydantic for env variables (not much difference with config file, just a simple class)
    updating models to sqlmodel (along with sqlalchemy for database connection, essentially sqlmodel+sqlalchemy+alembic)
    config.py is the old config file (keeping this for now)
    settings.py is the new one
    > pip install pydantic-settings

    authentication:
        v1 -> my own (using fastapi templates)
        v2 -> fastapi-users pattern
        but this will conflict with User model (they both have one)

    same process for database.


    v1 in authentication and database will use settings.py
    v2 (fastapi-users) in both will use config.py



    # a lifespan is logic is used to provide resources that are required throughout the application life time
    # starts right at startup and ends after shutdown

    sqlalchemy events should be studied.

